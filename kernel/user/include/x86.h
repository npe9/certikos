#ifndef _USER_X86_H_
#define _USER_X86_H_

#include <gcc.h>
#include <types.h>
#include <string.h>

#define PAGESIZE		4096

/* PAT */
#define	PAT_UNCACHEABLE		0x00
#define	PAT_WRITE_COMBINING	0x01
#define	PAT_WRITE_THROUGH	0x04
#define	PAT_WRITE_PROTECTED	0x05
#define	PAT_WRITE_BACK		0x06
#define	PAT_UNCACHED		0x07

/* (0 ~ 31) Exceptions: reserved by hardware  */
#define T_DIVIDE	0	/* divide error */
#define T_DEBUG		1	/* debug exception */
#define T_NMI		2	/* non-maskable interrupt */
#define T_BRKPT		3	/* breakpoint */
#define T_OFLOW		4	/* overflow */
#define T_BOUND		5	/* bounds check */
#define T_ILLOP		6	/* illegal opcode */
#define T_DEVICE	7	/* device not available */
#define T_DBLFLT	8	/* double fault */
#define T_COPROC	9	/* reserved (not generated by recent processors) */
#define T_TSS		10	/* invalid task switch segment */
#define T_SEGNP		11	/* segment not present */
#define T_STACK		12	/* stack exception */
#define T_GPFLT		13	/* general protection fault */
#define T_PGFLT		14	/* page fault */
#define T_RES		15	/* reserved */
#define T_FPERR		16	/* floating point error */
#define T_ALIGN		17	/* aligment check */
#define T_MCHK		18	/* machine check */
#define T_SIMD		19	/* SIMD floating point exception */
#define T_SECEV		30	/* Security-sensitive event */

/* EFLAGS register */
#define FL_CF		0x00000001	/* Carry Flag */
#define FL_PF		0x00000004	/* Parity Flag */
#define FL_AF		0x00000010	/* Auxiliary carry Flag */
#define FL_ZF		0x00000040	/* Zero Flag */
#define FL_SF		0x00000080	/* Sign Flag */
#define FL_TF		0x00000100	/* Trap Flag */
#define FL_IF		0x00000200	/* Interrupt Flag */
#define FL_DF		0x00000400	/* Direction Flag */
#define FL_OF		0x00000800	/* Overflow Flag */
#define FL_IOPL_MASK	0x00003000	/* I/O Privilege Level bitmask */
#define FL_IOPL_0	0x00000000	/*   IOPL == 0 */
#define FL_IOPL_1	0x00001000	/*   IOPL == 1 */
#define FL_IOPL_2	0x00002000	/*   IOPL == 2 */
#define FL_IOPL_3	0x00003000	/*   IOPL == 3 */
#define FL_NT		0x00004000	/* Nested Task */
#define FL_RF		0x00010000	/* Resume Flag */
#define FL_VM		0x00020000	/* Virtual 8086 mode */
#define FL_AC		0x00040000	/* Alignment Check */
#define FL_VIF		0x00080000	/* Virtual Interrupt Flag */
#define FL_VIP		0x00100000	/* Virtual Interrupt Pending */
#define FL_ID		0x00200000	/* ID flag */

/* CPUT types */
#define	CPU_UNKNOWN	0
#define CPU_INTEL	1
#define CPU_AMD		2

/* CPUID */
/* 0x0000_0001 ECX */
#define CPUID_FEATURE_RDRAND		(1<<21)
#define CPUID_FEATURE_F16C		(1<<29)
#define CPUID_FEATURE_AVX		(1<<28)
#define CPUID_FEATURE_OSXSAVE		(1<<27)
#define CPUID_FEATURE_XSAVE		(1<<26)
#define CPUID_FEATURE_AES		(1<<25)
#define CPUID_FEATURE_TSC_DEADLINE	(1<<24)
#define CPUID_FEATURE_POPCNT		(1<<23)
#define CPUID_FEATURE_MOVBE		(1<<22)
#define CPUID_FEATURE_X2APIC		(1<<21)
#define CPUID_FEATURE_SSE42		(1<<20)
#define CPUID_FEATURE_SSE41		(1<<19)
#define CPUID_FEATURE_DCA		(1<<18)
#define CPUID_FEATURE_PCID		(1<<17)
#define CPUID_FEATURE_PDCM		(1<<15)
#define CPUID_FEATURE_XTPR		(1<<14)
#define CPUID_FEATURE_CMPXCHG16B	(1<<13)
#define CPUID_FEATURE_FMA		(1<<12)
#define CPUID_FEATURE_CNXT_ID		(1<<10)
#define CPUID_FEATURE_SSSE3		(1<<9)
#define CPUID_FEATURE_TM2		(1<<8)
#define CPUID_FEATURE_EIST		(1<<7)
#define CPUID_FEATURE_SMX		(1<<6)
#define CPUID_FEATURE_VMX		(1<<5)
#define CPUID_FEATURE_DS_CPL		(1<<4)
#define CPUID_FEATURE_MONITOR		(1<<3)
#define CPUID_FEATURE_DTES64		(1<<2)
#define CPUID_FEATURE_PCLMULQDQ		(1<<1)
#define CPUID_FEATURE_SSE3		(1<<0)
/* 0x0000_0001 EDX */
#define CPUID_FEATURE_PBE		(1<<31)
#define CPUID_FEATURE_TM		(1<<29)
#define CPUID_FEATURE_HTT		(1<<28)
#define CPUID_FEATURE_SS		(1<<27)
#define CPUID_FEATURE_SSE2		(1<<26)
#define CPUID_FEATURE_SSE		(1<<25)
#define CPUID_FEATURE_FXSR		(1<<24)
#define CPUID_FEATURE_MMX		(1<<23)
#define CPUID_FEATURE_ACPI		(1<<22)
#define CPUID_FEATURE_DS		(1<<21)
#define CPUID_FEATURE_CLFUSH		(1<<19)
#define CPUID_FEATURE_PSE36		(1<<17)
#define CPUID_FEATURE_PAT		(1<<16)
#define CPUID_FEATURE_CMOV		(1<<15)
#define CPUID_FEATURE_MCA		(1<<14)
#define CPUID_FEATURE_PGE		(1<<13)
#define CPUID_FEATURE_MTRR		(1<<12)
#define CPUID_FEATURE_SYSENTREXIT	(1<<11)
#define CPUID_FEATURE_APIC		(1<<9)
#define CPUID_FEATURE_CMPXCHG8B		(1<<8)
#define CPUID_FEATURE_MCE		(1<<7)
#define CPUID_FEATURE_PAE		(1<<6)
#define CPUID_FEATURE_MSR		(1<<5)
#define CPUID_FEATURE_TSC		(1<<4)
#define CPUID_FEATURE_PSE		(1<<3)
#define CPUID_FEATURE_DE		(1<<2)
#define CPUID_FEATURE_VME		(1<<1)
#define CPUID_FEATURE_FPU		(1<<0)
/* 0x8000_0001 ECX */
#define CPUID_X_FEATURE_TOP		(1<<22)
#define CPUID_X_FEATURE_TBM		(1<<21)
#define CPUID_X_FEATURE_NODEID		(1<<19)
#define CPUID_X_FEATURE_FMA4		(1<<16)
#define CPUID_X_FEATURE_LWP		(1<<15)
#define CPUID_X_FEATURE_WDT		(1<<13)
#define CPUID_X_FEATURE_SKINIT		(1<<12)
#define CPUID_X_FEATURE_XOP		(1<<11)
#define CPUID_X_FEATURE_IBS		(1<<10)
#define CPUID_X_FEATURE_OSVW		(1<<9)
#define CPUID_X_FEATURE_PREFETCH	(1<<8)
#define CPUID_X_FEATURE_MISALIGN	(1<<7)
#define CPUID_X_FEATURE_SSE4A		(1<<6)
#define CPUID_X_FEATURE_ABM		(1<<5)
#define CPUID_X_FEATURE_ALTMOV		(1<<4)
#define CPUID_X_FEATURE_XAPIC		(1<<3)
#define CPUID_X_FEATURE_SVM		(1<<2)
#define CPUID_X_FEATURE_CMP		(1<<1)
#define CPUID_X_FEATURE_LAHF		(1<<0)
/* 0x8000_00001 EDX */
#define CPUID_X_FEATURE_3DNOW		(1<<31)
#define CPUID_X_FEATURE_X3DNOW		(1<<30)
#define CPUID_X_FEATURE_LM		(1<<29)
#define CPUID_X_FEATURE_RDTSCP		(1<<27)
#define CPUID_X_FEATURE_1GPG		(1<<26)
#define CPUID_X_FEATURE_FFXSR		(1<<25)
#define CPUID_X_FEATURE_FXSR		(1<<24)
#define CPUID_X_FEATURE_MMX		(1<<23)
#define CPUID_X_FEATURE_XMMX		(1<<22)
#define CPUID_X_FEATURE_NX		(1<<20)
#define CPUID_X_FEATURE_PSE36		(1<<17)
#define CPUID_X_FEATURE_PAT		(1<<16)
#define CPUID_X_FEATURE_CMOV		(1<<15)
#define CPUID_X_FEATURE_MCA		(1<<14)
#define CPUID_X_FEATURE_PGE		(1<<13)
#define CPUID_X_FEATURE_MTRR		(1<<12)
#define CPUID_X_FEATURE_SYSCALL		(1<<11)
#define CPUID_X_FEATURE_APIC		(1<<9)
#define CPUID_X_FEATURE_CMPXHG8B	(1<<8)
#define CPUID_X_FEATURE_MCE		(1<<7)
#define CPUID_X_FEATURE_PAE		(1<<6)
#define CPUID_X_FEATURE_MSR		(1<<5)
#define CPUID_X_FEATURE_TSC		(1<<4)
#define CPUID_X_FEATURE_PSE		(1<<3)
#define CPUID_X_FEATURE_DE		(1<<2)
#define CPUID_X_FEATURE_VME		(1<<1)
#define CPUID_X_FEATURE_FPU		(1<<0)

static gcc_inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
	return data;
}

static gcc_inline void
insb(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsb"                 :
			 "=D" (addr), "=c" (cnt)                :
			 "d" (port), "0" (addr), "1" (cnt)      :
			 "memory", "cc");
}

static gcc_inline uint16_t
inw(int port)
{
	uint16_t data;
	__asm __volatile("inw %w1,%0" : "=a" (data) : "d" (port));
	return data;
}

static gcc_inline void
insw(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsw"                 :
			 "=D" (addr), "=c" (cnt)                :
			 "d" (port), "0" (addr), "1" (cnt)      :
			 "memory", "cc");
}

static gcc_inline uint32_t
inl(int port)
{
	uint32_t data;
	__asm __volatile("inl %w1,%0" : "=a" (data) : "d" (port));
	return data;
}

static gcc_inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"                 :
			 "=D" (addr), "=c" (cnt)                :
			 "d" (port), "0" (addr), "1" (cnt)      :
			 "memory", "cc");
}

static gcc_inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
}

static gcc_inline void
outsb(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsb"                :
			 "=S" (addr), "=c" (cnt)                :
			 "d" (port), "0" (addr), "1" (cnt)      :
			 "cc");
}

static gcc_inline void
outw(int port, uint16_t data)
{
	__asm __volatile("outw %0,%w1" : : "a" (data), "d" (port));
}

static gcc_inline void
outsw(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsw"                :
			 "=S" (addr), "=c" (cnt)                :
			 "d" (port), "0" (addr), "1" (cnt)      :
			 "cc");
}

static gcc_inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"                :
			 "=S" (addr), "=c" (cnt)                :
			 "d" (port), "0" (addr), "1" (cnt)      :
			 "cc");
}

static gcc_inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
}

static gcc_inline void
smp_wmb(void)
{
	__asm __volatile("":::"memory");
}

static gcc_inline void
smp_rmb(void)
{
	__asm __volatile("":::"memory");
}

static gcc_inline uint64_t
rdtsc(void)
{
	uint64_t rv;

	__asm __volatile("rdtsc" : "=A" (rv));
	return (rv);
}

static gcc_inline uint64_t
rdtscp(void)
{
	uint64_t rv;

	/* TODO: decide to use which one through checking cpuid */
#if 0
	/* rdtscp maybe not provided by VirtualBox */
	__asm __volatile("rdtscp" : "=A" (rv));
#else
	__asm __volatile("lfence;rdtsc" : "=A" (rv));
#endif
	return (rv);
}

static gcc_inline void
cpuid(uint32_t info,
      uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
{
	uint32_t eax, ebx, ecx, edx;
	__asm __volatile("cpuid"
			 : "=a" (eax), "=b" (ebx), "=c" (ecx), "=d" (edx)
			 : "a" (info));
	if (eaxp)
		*eaxp = eax;
	if (ebxp)
		*ebxp = ebx;
	if (ecxp)
		*ecxp = ecx;
	if (edxp)
		*edxp = edx;
}

typedef enum { UNKNOWN_CPU, INTEL, AMD } cpu_vendor;

static gcc_inline cpu_vendor
vendor()
{
    uint32_t eax, ebx, ecx, edx;
    char cpuvendor[13];

    cpuid(0x0, &eax, &ebx, &ecx, &edx);
    ((uint32_t *) cpuvendor)[0] = ebx;
    ((uint32_t *) cpuvendor)[1] = edx;
    ((uint32_t *) cpuvendor)[2] = ecx;
    cpuvendor[12] = '\0';

    if (strncmp(cpuvendor, "GenuineIntel", 20) == 0)
        return INTEL;
    else if (strncmp(cpuvendor, "AuthenticAMD", 20) == 0)
        return AMD;
    else
        return UNKNOWN_CPU;
}

static gcc_inline void
cpuid_subleaf(uint32_t leaf, uint32_t subleaf,
	      uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
{
	uint32_t eax, ebx, ecx, edx;
	asm volatile("cpuid"
		     : "=a" (eax), "=b" (ebx), "=c" (ecx), "=d" (edx)
		     : "a" (leaf), "c" (subleaf));
	if (eaxp)
		*eaxp = eax;
	if (ebxp)
		*ebxp = ebx;
	if (ecxp)
		*ecxp = ecx;
	if (edxp)
		*edxp = edx;
}

#endif /* !_USER_X86_H_ */
