(* *********************************************************************)
(*                                                                     *)
(*            The CertiKOS Certified Kit Operating System              *)
(*                                                                     *)
(*                   The FLINT Group, Yale University                  *)
(*                                                                     *)
(*  Copyright The FLINT Group, Yale University.  All rights reserved.  *)
(*  This file is distributed under the terms of the Yale University    *)
(*  Non-Commercial License Agreement.                                  *)
(*                                                                     *)
(* *********************************************************************)
(* WARNING: This file is generated by mCertiKOS.rb.
            All modification will be lost when regenerating,
            modify script/ident_config instead. *)
Require Import String.
Require Import compcert.lib.Coqlib.
Require Import compcert.common.AST.
Require Import compcertx.backend.I64helpers.
Require Import liblayers.compcertx.ErrorMonad.
Require Import mcertikos.layerlib.GlobIdent.

Fixpoint reserved_symbols_aux (accu: list (ident * string)) (l: list string): res (list (ident * string)) :=
  match l with
    | nil => ret accu
    | (s :: l') =>
      i <- reserved_id s;
      reserved_symbols_aux ((i, s) :: accu) l'
  end.

Definition reserved_symbols_strong :
  {l | reserved_symbols_aux nil reserved_strings = ret l}.
Proof.
  vm_compute. eauto.
Defined.

Definition reserved_symbols :=
  let (l, _) := reserved_symbols_strong in l.

Open Scope string_scope.

Definition symbols: list (ident * string) :=
  (AC_LOC, "AC_LOC") ::
  (AT_LOC, "AT_LOC") ::
  (CHPOOL_LOC, "CHPOOL_LOC") ::
  (CURID_LOC, "CURID_LOC") ::
  (ELF_ENTRY_LOC, "ELF_ENTRY_LOC") ::
  (ELF_LOC, "ELF_LOC") ::
  (EPT_LOC, "EPT_LOC") ::
  (FlatMem_LOC, "FlatMem_LOC") ::
  (HCtxt_LOC, "HCtxt_LOC") ::
  (IDPMap_LOC, "IDPMap_LOC") ::
  (KCtxtPool_LOC, "KCtxtPool_LOC") ::
  (NPS_LOC, "NPS_LOC") ::
  (NPT_LOC, "NPT_LOC") ::
  (PTP_LOC, "PTP_LOC") ::
  (PTPool_LOC, "PTPool_LOC") ::
  (SHRDMEMPOOL_LOC, "SHRDMEMPOOL_LOC") ::
  (STACK_LOC, "STACK_LOC") ::
  (SYNCCHPOOL_LOC, "SYNCCHPOOL_LOC") ::
  (TCBPool_LOC, "TCBPool_LOC") ::
  (TDQPool_LOC, "TDQPool_LOC") ::
  (UCTX_LOC, "UCTX_LOC") ::
  (VMCB_Z_LOC, "VMCB_Z_LOC") ::
  (VMCS_LOC, "VMCS_LOC") ::
  (VMX_LOC, "VMX_LOC") ::
  (XVMST_LOC, "XVMST_LOC") ::
  (at_get, "at_get") ::
  (at_get_c, "at_get_c") ::
  (at_set, "at_set") ::
  (at_set_c, "at_set_c") ::
  (boot_loader, "boot_loader") ::
  (clear_PDE, "clear_PDE") ::
  (clear_cr2, "clear_cr2") ::
  (clear_shared_mem, "clear_shared_mem") ::
  (container_alloc, "container_alloc") ::
  (container_can_consume, "container_can_consume") ::
  (container_free, "container_free") ::
  (container_get_nchildren, "container_get_nchildren") ::
  (container_get_parent, "container_get_parent") ::
  (container_get_quota, "container_get_quota") ::
  (container_get_usage, "container_get_usage") ::
  (container_init, "container_init") ::
  (container_revoke, "container_revoke") ::
  (container_split, "container_split") ::
  (dequeue, "dequeue") ::
  (device_output, "device_output") ::
  (elf_load, "elf_load") ::
  (enqueue, "enqueue") ::
  (ept_add_mapping, "ept_add_mapping") ::
  (ept_get_page_entry, "ept_get_page_entry") ::
  (ept_gpa_to_hpa, "ept_gpa_to_hpa") ::
  (ept_init, "ept_init") ::
  (ept_insert, "ept_insert") ::
  (ept_invalidate_mappings, "ept_invalidate_mappings") ::
  (ept_mmap, "ept_mmap") ::
  (ept_set_page_entry, "ept_set_page_entry") ::
  (ept_set_permission, "ept_set_permission") ::
  (flatmem_copy, "flatmem_copy") ::
  (fload, "fload") ::
  (fstore, "fstore") ::
  (gdt_LOC, "gdt_LOC") ::
  (get_EPTE, "get_EPTE") ::
  (get_PDE, "get_PDE") ::
  (get_PTE, "get_PTE") ::
  (get_chan_content, "get_chan_content") ::
  (get_chan_info, "get_chan_info") ::
  (get_curid, "get_curid") ::
  (get_head, "get_head") ::
  (get_kernel_pa, "get_kernel_pa") ::
  (get_mml, "get_mml") ::
  (get_mms, "get_mms") ::
  (get_next, "get_next") ::
  (get_nps, "get_nps") ::
  (get_prev, "get_prev") ::
  (get_shared_mem_loc, "get_shared_mem_loc") ::
  (get_shared_mem_seen, "get_shared_mem_seen") ::
  (get_shared_mem_state, "get_shared_mem_state") ::
  (get_shared_mem_status_seen, "get_shared_mem_status_seen") ::
  (get_size, "get_size") ::
  (get_state, "get_state") ::
  (get_sync_chan_count, "get_sync_chan_count") ::
  (get_sync_chan_paddr, "get_sync_chan_paddr") ::
  (get_sync_chan_to, "get_sync_chan_to") ::
  (get_tail, "get_tail") ::
  (host_in, "host_in") ::
  (host_out, "host_out") ::
  (idpde_init, "idpde_init") ::
  (idt_LOC, "idt_LOC") ::
  (init_chan, "init_chan") ::
  (init_sync_chan, "init_sync_chan") ::
  (io_bitmap_LOC, "io_bitmap_LOC") ::
  (is_chan_ready, "is_chan_ready") ::
  (is_norm, "is_norm") ::
  (is_pid_sending_to, "is_pid_sending_to") ::
  (is_usable, "is_usable") ::
  (is_used, "is_used") ::
  (kctxt_new, "kctxt_new") ::
  (kctxt_switch, "kctxt_switch") ::
  (la2pa_resv, "la2pa_resv") ::
  (mem_init, "mem_init") ::
  (msr_bitmap_LOC, "msr_bitmap_LOC") ::
  (npt_init, "npt_init") ::
  (npt_insert, "npt_insert") ::
  (offer_shared_mem, "offer_shared_mem") ::
  (palloc, "palloc") ::
  (pfree, "pfree") ::
  (pgf_handler, "pgf_handler") ::
  (pmap_init, "pmap_init") ::
  (print, "print") ::
  (proc_create, "proc_create") ::
  (proc_exit_user, "proc_exit_user") ::
  (proc_init, "proc_init") ::
  (proc_start_user, "proc_start_user") ::
  (pt_alloc_pde, "pt_alloc_pde") ::
  (pt_free, "pt_free") ::
  (pt_free_pde, "pt_free_pde") ::
  (pt_in, "pt_in") ::
  (pt_init, "pt_init") ::
  (pt_init_comm, "pt_init_comm") ::
  (pt_init_kern, "pt_init_kern") ::
  (pt_insert, "pt_insert") ::
  (pt_insert_aux, "pt_insert_aux") ::
  (pt_insert_pde, "pt_insert_pde") ::
  (pt_new, "pt_new") ::
  (pt_out, "pt_out") ::
  (pt_read, "pt_read") ::
  (pt_read_pde, "pt_read_pde") ::
  (pt_resv, "pt_resv") ::
  (pt_resv2, "pt_resv2") ::
  (pt_rmv, "pt_rmv") ::
  (pt_rmv_aux, "pt_rmv_aux") ::
  (pt_rmv_pde, "pt_rmv_pde") ::
  (ptfault_resv, "ptfault_resv") ::
  (queue_rmv, "queue_rmv") ::
  (rcr0, "rcr0") ::
  (rcr3, "rcr3") ::
  (rcr4, "rcr4") ::
  (rdmsr, "rdmsr") ::
  (receive_chan, "receive_chan") ::
  (restore_hctx, "restore_hctx") ::
  (restore_uctx, "restore_uctx") ::
  (rmv_PDE, "rmv_PDE") ::
  (rmv_PTE, "rmv_PTE") ::
  (save_hctx, "save_hctx") ::
  (save_uctx, "save_uctx") ::
  (sched_init, "sched_init") ::
  (sendto_chan, "sendto_chan") ::
  (set_EPDPTE, "set_EPDPTE") ::
  (set_EPDTE, "set_EPDTE") ::
  (set_EPML4E, "set_EPML4E") ::
  (set_EPTE, "set_EPTE") ::
  (set_IDPTE, "set_IDPTE") ::
  (set_NPDE, "set_NPDE") ::
  (set_NPTE, "set_NPTE") ::
  (set_PDE, "set_PDE") ::
  (set_PDEU, "set_PDEU") ::
  (set_PTE, "set_PTE") ::
  (set_RA, "set_RA") ::
  (set_SP, "set_SP") ::
  (set_bit, "set_bit") ::
  (set_chan_content, "set_chan_content") ::
  (set_chan_info, "set_chan_info") ::
  (set_cr3, "set_cr3") ::
  (set_curid, "set_curid") ::
  (set_head, "set_head") ::
  (set_next, "set_next") ::
  (set_norm, "set_norm") ::
  (set_nps, "set_nps") ::
  (set_pg, "set_pg") ::
  (set_prev, "set_prev") ::
  (set_pt, "set_pt") ::
  (set_shared_mem_loc, "set_shared_mem_loc") ::
  (set_shared_mem_seen, "set_shared_mem_seen") ::
  (set_shared_mem_state, "set_shared_mem_state") ::
  (set_state, "set_state") ::
  (set_sync_chan_count, "set_sync_chan_count") ::
  (set_sync_chan_paddr, "set_sync_chan_paddr") ::
  (set_sync_chan_to, "set_sync_chan_to") ::
  (set_tail, "set_tail") ::
  (shared_mem_init, "shared_mem_init") ::
  (shared_mem_status, "shared_mem_status") ::
  (shared_mem_to_dead, "shared_mem_to_dead") ::
  (shared_mem_to_pending, "shared_mem_to_pending") ::
  (shared_mem_to_ready, "shared_mem_to_ready") ::
  (srecv_chan, "srecv_chan") ::
  (ssend_to_chan, "ssend_to_chan") ::
  (svm_exit_vm, "svm_exit_vm") ::
  (svm_get_exit_fault_addr, "svm_get_exit_fault_addr") ::
  (svm_get_exit_io_neip, "svm_get_exit_io_neip") ::
  (svm_get_exit_io_port, "svm_get_exit_io_port") ::
  (svm_get_exit_io_rep, "svm_get_exit_io_rep") ::
  (svm_get_exit_io_str, "svm_get_exit_io_str") ::
  (svm_get_exit_io_width, "svm_get_exit_io_width") ::
  (svm_get_exit_io_write, "svm_get_exit_io_write") ::
  (svm_get_exit_reason, "svm_get_exit_reason") ::
  (svm_get_reg, "svm_get_reg") ::
  (svm_run_vm, "svm_run_vm") ::
  (svm_set_intercept_intwin, "svm_set_intercept_intwin") ::
  (svm_set_reg, "svm_set_reg") ::
  (svm_state_save, "svm_state_save") ::
  (svm_sync, "svm_sync") ::
  (syncreceive_chan, "syncreceive_chan") ::
  (syncsendto_chan_post, "syncsendto_chan_post") ::
  (syncsendto_chan_pre, "syncsendto_chan_pre") ::
  (sys_certikos_init, "sys_certikos_init") ::
  (sys_check_int_shadow, "sys_check_int_shadow") ::
  (sys_check_pending_event, "sys_check_pending_event") ::
  (sys_disk_cap, "sys_disk_cap") ::
  (sys_disk_op, "sys_disk_op") ::
  (sys_ept_insert, "sys_ept_insert") ::
  (sys_get_curid, "sys_get_curid") ::
  (sys_get_exit_fault_addr, "sys_get_exit_fault_addr") ::
  (sys_get_exit_io_neip, "sys_get_exit_io_neip") ::
  (sys_get_exit_io_port, "sys_get_exit_io_port") ::
  (sys_get_exit_io_rep, "sys_get_exit_io_rep") ::
  (sys_get_exit_io_str, "sys_get_exit_io_str") ::
  (sys_get_exit_io_width, "sys_get_exit_io_width") ::
  (sys_get_exit_io_write, "sys_get_exit_io_write") ::
  (sys_get_exit_reason, "sys_get_exit_reason") ::
  (sys_get_exitinfo, "sys_get_exitinfo") ::
  (sys_get_next_eip, "sys_get_next_eip") ::
  (sys_get_quota, "sys_get_quota") ::
  (sys_get_reg, "sys_get_reg") ::
  (sys_get_tsc_offset, "sys_get_tsc_offset") ::
  (sys_get_tsc_per_ms, "sys_get_tsc_per_ms") ::
  (sys_handle_rdmsr, "sys_handle_rdmsr") ::
  (sys_handle_wrmsr, "sys_handle_wrmsr") ::
  (sys_inject_event, "sys_inject_event") ::
  (sys_intercept_int_window, "sys_intercept_int_window") ::
  (sys_is_chan_ready, "sys_is_chan_ready") ::
  (sys_mmap, "sys_mmap") ::
  (sys_npt_insert, "sys_npt_insert") ::
  (sys_offer_shared_mem, "sys_offer_shared_mem") ::
  (sys_palloc, "sys_palloc") ::
  (sys_pfree, "sys_pfree") ::
  (sys_print, "sys_print") ::
  (sys_proc_create, "sys_proc_create") ::
  (sys_pt_read, "sys_pt_read") ::
  (sys_puts, "sys_puts") ::
  (sys_ready, "sys_ready") ::
  (sys_receive_chan, "sys_receive_chan") ::
  (sys_recv, "sys_recv") ::
  (sys_ring0_spawn, "sys_ring0_spawn") ::
  (sys_run_vm, "sys_run_vm") ::
  (sys_send, "sys_send") ::
  (sys_sendto_chan, "sys_sendto_chan") ::
  (sys_sendtochan_post, "sys_sendtochan_post") ::
  (sys_sendtochan_pre, "sys_sendtochan_pre") ::
  (sys_set_intercept_intwin, "sys_set_intercept_intwin") ::
  (sys_set_reg, "sys_set_reg") ::
  (sys_set_seg, "sys_set_seg") ::
  (sys_set_tsc_offset, "sys_set_tsc_offset") ::
  (sys_sleep, "sys_sleep") ::
  (sys_spawn, "sys_spawn") ::
  (sys_srecv_chan, "sys_srecv_chan") ::
  (sys_ssend_to_chan, "sys_ssend_to_chan") ::
  (sys_svm_exit_vm, "sys_svm_exit_vm") ::
  (sys_sync, "sys_sync") ::
  (sys_thread_kill, "sys_thread_kill") ::
  (sys_thread_sleep, "sys_thread_sleep") ::
  (sys_thread_wakeup, "sys_thread_wakeup") ::
  (sys_thread_yield, "sys_thread_yield") ::
  (sys_uctx_get, "sys_uctx_get") ::
  (sys_uctx_set, "sys_uctx_set") ::
  (sys_yield, "sys_yield") ::
  (syscall_dispatch, "syscall_dispatch") ::
  (syscall_dispatch_C, "syscall_dispatch_C") ::
  (tcb_init, "tcb_init") ::
  (tdq_init, "tdq_init") ::
  (tdqueue_init, "tdqueue_init") ::
  (thread_free, "thread_free") ::
  (thread_init, "thread_init") ::
  (thread_kill, "thread_kill") ::
  (thread_sched, "thread_sched") ::
  (thread_sleep, "thread_sleep") ::
  (thread_sleep2, "thread_sleep2") ::
  (thread_spawn, "thread_spawn") ::
  (thread_wakeup, "thread_wakeup") ::
  (thread_wakeup2, "thread_wakeup2") ::
  (thread_yield, "thread_yield") ::
  (trap_get, "trap_get") ::
  (trap_in, "trap_in") ::
  (trap_out, "trap_out") ::
  (trap_print, "trap_print") ::
  (trap_sendtochan_post, "trap_sendtochan_post") ::
  (trap_sendtochan_pre, "trap_sendtochan_pre") ::
  (trap_set, "trap_set") ::
  (tss_LOC, "tss_LOC") ::
  (uctx_arg1, "uctx_arg1") ::
  (uctx_arg2, "uctx_arg2") ::
  (uctx_arg3, "uctx_arg3") ::
  (uctx_arg4, "uctx_arg4") ::
  (uctx_arg5, "uctx_arg5") ::
  (uctx_arg6, "uctx_arg6") ::
  (uctx_get, "uctx_get") ::
  (uctx_set, "uctx_set") ::
  (uctx_set_eip, "uctx_set_eip") ::
  (uctx_set_errno, "uctx_set_errno") ::
  (uctx_set_retval1, "uctx_set_retval1") ::
  (uctx_set_retval2, "uctx_set_retval2") ::
  (uctx_set_retval3, "uctx_set_retval3") ::
  (uctx_set_retval4, "uctx_set_retval4") ::
  (vmcb_check_int_shadow, "vmcb_check_int_shadow") ::
  (vmcb_check_pending_event, "vmcb_check_pending_event") ::
  (vmcb_clear_virq, "vmcb_clear_virq") ::
  (vmcb_get_exit_info, "vmcb_get_exit_info") ::
  (vmcb_get_next_eip, "vmcb_get_next_eip") ::
  (vmcb_get_reg, "vmcb_get_reg") ::
  (vmcb_inject_event, "vmcb_inject_event") ::
  (vmcb_inject_virq, "vmcb_inject_virq") ::
  (vmcb_read_v, "vmcb_read_v") ::
  (vmcb_read_z, "vmcb_read_z") ::
  (vmcb_restore, "vmcb_restore") ::
  (vmcb_set_intercept_vint, "vmcb_set_intercept_vint") ::
  (vmcb_set_reg, "vmcb_set_reg") ::
  (vmcb_set_seg, "vmcb_set_seg") ::
  (vmcb_write_v, "vmcb_write_v") ::
  (vmcb_write_z, "vmcb_write_z") ::
  (vmcs_get_abrtid, "vmcs_get_abrtid") ::
  (vmcs_get_revid, "vmcs_get_revid") ::
  (vmcs_read, "vmcs_read") ::
  (vmcs_readz, "vmcs_readz") ::
  (vmcs_readz64, "vmcs_readz64") ::
  (vmcs_set_abrtid, "vmcs_set_abrtid") ::
  (vmcs_set_defaults, "vmcs_set_defaults") ::
  (vmcs_set_revid, "vmcs_set_revid") ::
  (vmcs_write, "vmcs_write") ::
  (vmcs_write_ident, "vmcs_write_ident") ::
  (vmcs_writez, "vmcs_writez") ::
  (vmcs_writez64, "vmcs_writez64") ::
  (vmptrld, "vmptrld") ::
  (vmx_check_int_shadow, "vmx_check_int_shadow") ::
  (vmx_check_pending_event, "vmx_check_pending_event") ::
  (vmx_enter, "vmx_enter") ::
  (vmx_enter_pre, "vmx_enter_pre") ::
  (vmx_exit, "vmx_exit") ::
  (vmx_exit_post, "vmx_exit_post") ::
  (vmx_get_exit_fault_addr, "vmx_get_exit_fault_addr") ::
  (vmx_get_exit_io_port, "vmx_get_exit_io_port") ::
  (vmx_get_exit_io_rep, "vmx_get_exit_io_rep") ::
  (vmx_get_exit_io_str, "vmx_get_exit_io_str") ::
  (vmx_get_exit_reason, "vmx_get_exit_reason") ::
  (vmx_get_io_width, "vmx_get_io_width") ::
  (vmx_get_io_write, "vmx_get_io_write") ::
  (vmx_get_next_eip, "vmx_get_next_eip") ::
  (vmx_get_reg, "vmx_get_reg") ::
  (vmx_get_tsc_offset, "vmx_get_tsc_offset") ::
  (vmx_init, "vmx_init") ::
  (vmx_inject_event, "vmx_inject_event") ::
  (vmx_read, "vmx_read") ::
  (vmx_readz, "vmx_readz") ::
  (vmx_readz64, "vmx_readz64") ::
  (vmx_return_from_guest, "vmx_return_from_guest") ::
  (vmx_run_return_from_guest, "vmx_run_return_from_guest") ::
  (vmx_run_vm, "vmx_run_vm") ::
  (vmx_set_ctlreg, "vmx_set_ctlreg") ::
  (vmx_set_desc, "vmx_set_desc") ::
  (vmx_set_intercept_intwin, "vmx_set_intercept_intwin") ::
  (vmx_set_mmap, "vmx_set_mmap") ::
  (vmx_set_reg, "vmx_set_reg") ::
  (vmx_set_tsc_offset, "vmx_set_tsc_offset") ::
  (vmx_write, "vmx_write") ::
  (vmx_writez, "vmx_writez") ::
  (vmx_writez64, "vmx_writez64") ::
  (vmxinfo_get, "vmxinfo_get") ::
  (wrmsr, "wrmsr") ::
  (xvmst_read, "xvmst_read") ::
  (xvmst_restore, "xvmst_restore") ::
  (xvmst_write, "xvmst_write") ::
  (yield, "yield") ::
  reserved_symbols.
